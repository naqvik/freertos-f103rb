# -*- mode: org; org-src-preserve-indentation: t; -*-
#+startup: indent overview
#+options: toc:nil
#+latex_header: \setlength{\voffset}{-0.9in}
# #+latex_header: \setlength{\topmargin}{5pt}
#+latex_header: \setlength{\textheight}{1.2\textheight}
#+title: FreeRTOS in Keil, a Kata
#+author: K. Naqvi
#+date: [2024-02-12 Mon]

Here we're getting a simple application to run
- on the f103rb nucleo board
- using the Keil armclang-based toolchain
- and including FreeRTOS

* Starting fresh
First I'll put together a simple project with an empty =main()=.  This 
project will be in a subdirectory called kata1.

Reminder: When executing the following steps, I have to first
completely remove the existing project, with =rm -rf kata1=.

#+begin_src bash :results none
  mkdir kata1
#+end_src

#+begin_src bash :results none
  git -C kata1 init
#+end_src

Now I'll make a directory structure to hold my application code.
#+begin_src bash :results none
  mkdir -p kata1/code/app/include
#+end_src

And now I'll create all the source files, in an empty state.
#+begin_src bash :results none
  touch kata1/code/app/{simple.cpp,include/FreeRTOSConfig.h}
  touch kata1/code/Makefile
#+end_src

I also want to incorporate freertos, via a symlink.  I've installed
v10.5.1 under
: ../../FreeRTOS-LTS
and the link is to reside as a sibling to =code=, so it must be placed
under =kata1/code=.
#+begin_src bash :dir kata1/code :results none
  ln -s ../../../../FreeRTOS-LTS/FreeRTOS/FreeRTOS-Kernel/ FreeRTOS-Kernel
#+end_src

Next I'd like to fill in my empty source files, with prebuilt content.

First a Makefile that builds an emacs tags database for freertos.
/Note to self/: To generate this file, use the key sequence =C-u C-c
C-v t= with point inside the block.
#+begin_src makefile :tangle kata1/code/Makefile  :results none
INC := app/include FreeRTOS-Kernel/include
INC += FreeRTOS-Kernel/portable/GCC/ARM_CM3

tags :
	etags app/*.cpp app/include/*.h FreeRTOS-Kernel/*.c \
           FreeRTOS-Kernel/include/*.h \
           FreeRTOS-Kernel/portable/GCC/ARM_CM3/*.[ch]

mostlyclean :
clean : mostlyclean
	rm -f TAGS
#+end_src

The primary source file is =simple.cpp=

#+begin_src bash :results none
cat <<EOF > kata1/code/app/simple.cpp
/** A simple app, to demonstrate freertos */

/* standard includes */

/* freertos includes */
#include "FreeRTOS.h"
#include "task.h"

/* HW-specific includes (move to bsp area) */
#include "stm32f10x.h"

int main() {
    
}
EOF
#+end_src

And the .gitignore file at the top
#+begin_src bash :results none
cat <<EOF > kata1/.gitignore
# ignore emacs backups
*~
# ignore tags file generated by 'etags' in Makefile
/code/TAGS

# ignore uvision-generated files
code/Listings/
code/Objects/
*.uvguix.*

# ignore symlink to freertos: I'm not tracking this
# and anyway I've made it all read-only
/code/FreeRTOS-Kernel
EOF
#+end_src

We also need a FreeRTOSConfig.h.  This file is considered to be part
of the user code so I'm putting it under the =app/include=
directory. This one sets the heap size to 2kiB.  Later I'll use the
=heap_4.c= manager.  Note: this link is an essential online
[[https://www.freertos.org/a00110.html][FreeRTOSConfig.h reference]].

#+begin_src bash  :results none
cat <<EOF > kata1/code/app/include/FreeRTOSConfig.h
/*
 * FreeRTOS Kernel V10.0.1
 * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * http://www.FreeRTOS.org
 * http://aws.amazon.com/freertos
 *
 * 1 tab == 4 spaces!
 */

#ifndef FREERTOS_CONFIG_H
#define FREERTOS_CONFIG_H

/*-----------------------------------------------------------
 * Application specific definitions.
 *
 * These definitions should be adjusted for your particular hardware and
 * application requirements.
 *
 * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
 * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. 
 *
 * See http://www.freertos.org/a00110.html.
 *----------------------------------------------------------*/

#define configUSE_PREEMPTION        1
#define configUSE_IDLE_HOOK         0
#define configUSE_TICK_HOOK         0
#define configCPU_CLOCK_HZ          ( ( unsigned long ) 72000000 )  
#define configTICK_RATE_HZ          ( ( TickType_t ) 1000 )
#define configMAX_PRIORITIES        ( 5 )
#define configMINIMAL_STACK_SIZE    ( ( unsigned short ) 128 )
#define configMAX_TASK_NAME_LEN     ( 16 )
#define configUSE_TRACE_FACILITY    0
#define configUSE_16_BIT_TICKS      0
#define configIDLE_SHOULD_YIELD     1

/* memory allocation related definitions */
#define configTOTAL_HEAP_SIZE              ( ( size_t ) ( 2 * 1024 ) )
#define configSUPPORT_STATIC_ALLOCATION    0
#define configSUPPORT_DYNAMIC_ALLOCATION   1

/* Hook function related definitions */
#define configUSE_MALLOC_FAILED_HOOK 0

/* Co-routine definitions. */
#define configUSE_CO_ROUTINES       0
#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )

/* Set the following definitions to 1 to include the API function, or zero
to exclude the API function. */

/* optional functions - most linkers will remove unused fcns anyway */
#define INCLUDE_vTaskPrioritySet        1
#define INCLUDE_uxTaskPriorityGet       1
#define INCLUDE_vTaskDelete             1
#define INCLUDE_vTaskCleanUpResources   0
#define INCLUDE_vTaskSuspend            1
#define INCLUDE_vTaskDelayUntil         1
#define INCLUDE_vTaskDelay              1

/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255
(lowest) to 0 (1?) (highest). */
#define configKERNEL_INTERRUPT_PRIORITY         255
/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
#define configMAX_SYSCALL_INTERRUPT_PRIORITY    191 /* equivalent to 0xb0, or priority 11. */


/* This is the value being used as per the ST library which permits 16
priority values, 0 to 15.  This must correspond to the
configKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest
NVIC value of 255. */
#define configLIBRARY_KERNEL_INTERRUPT_PRIORITY 15

#endif /* FREERTOS_CONFIG_H */
EOF
#+end_src

At this point I should commit the current (pre-Keil) state.  If I have
not already done so.

Do this if this is the first actual commit: it adds everything.
#+begin_src bash :results none
git -C kata1 add .gitignore code
#+end_src

Then commit.  This will commit all files that have been /added/.
#+begin_src bash :results none
git -C kata1 commit --all -m "Bare f103rb proj with no Keil stuff"
#+end_src

At this point I need to create a Keil project.  Not at the top level,
but in =kata1/code=.

* Moving to the Keil environment
1. I'll create a project
   - named =freertos1=
   - using the stm32f103rb
   - with packages =CMSIS CORE= and =Device Startup=
2. Set the debugger to stlink (default is ulink2), and do a global save.
3. Add
   - code/DebugConfig/
   - code/RTE/
   - code/freertos1.uvoptx
   - code/freertos1.uvprojx
4. Commit: "Started with Keil, set debug probe to stlink"
