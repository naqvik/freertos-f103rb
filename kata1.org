# -*- mode: org; org-src-preserve-indentation: t; -*-
#+startup: indent overview
#+options: toc:nil
#+latex_header: \setlength{\voffset}{-0.9in}
# #+latex_header: \setlength{\topmargin}{5pt}
#+latex_header: \setlength{\textheight}{1.2\textheight}
#+title: FreeRTOS in Keil, a Kata
#+author: K. Naqvi
#+date: [2024-02-12 Mon]

Here we're getting a simple application to run
- on the f103rb nucleo board
- using the Keil armclang-based toolchain
- and including FreeRTOS

* Starting fresh
First I'll put together a simple project with an empty =main()=.  This 
project will be in a subdirectory called kata1.

Reminder: When executing the following steps, I have to first
completely remove the existing project, with =rm -rf kata1=.

#+begin_src bash :results none
  mkdir kata1
#+end_src

#+begin_src bash :results none
  git -C kata1 init
#+end_src

Now I'll make a directory structure to hold my application code.
#+begin_src bash :results none
  mkdir -p kata1/code/app/include
#+end_src

And now I'll create all the source files, in an empty state.
#+begin_src bash :results none
  touch kata1/code/app/{simple.cpp,include/FreeRTOSConfig.h}
  touch kata1/code/Makefile
#+end_src

I also want to incorporate freertos, via a symlink.  I've installed
v10.5.1 under
: ../../FreeRTOS-LTS
and the link is to reside as a sibling to =code=, so it must be placed
under =kata1/code=.
#+begin_src bash :dir kata1/code :results none
  ln -s ../../../../FreeRTOS-LTS/FreeRTOS/FreeRTOS-Kernel/ FreeRTOS-Kernel
#+end_src

Next I'd like to fill in my empty source files, with prebuilt content.

First a Makefile that builds an emacs tags database for freertos.
/Note to self/: To generate this file, use the key sequence =C-u C-c
C-v t= with point inside the block.
#+begin_src makefile :tangle kata1/code/Makefile  :results none
INC := app/include FreeRTOS-Kernel/include
INC += FreeRTOS-Kernel/portable/GCC/ARM_CM3

tags :
	etags app/*.cpp app/include/*.h FreeRTOS-Kernel/*.c \
           FreeRTOS-Kernel/include/*.h \
           FreeRTOS-Kernel/portable/GCC/ARM_CM3/*.[ch]

mostlyclean :
clean : mostlyclean
	rm -f TAGS
#+end_src

The primary source file is =simple.cpp=

#+begin_src bash :results none
cat <<EOF > kata1/code/app/simple.cpp
/** A simple app, to demonstrate freertos */

/* standard includes */

/* freertos includes */
#include "FreeRTOS.h"
#include "task.h"

/* HW-specific includes (move to bsp area) */
#include "stm32f10x.h"

int main() {
    
}
EOF
#+end_src

And the .gitignore file at the top
#+begin_src bash :results none
cat <<EOF > kata1/.gitignore
# ignore emacs backups
*~
# ignore tags file generated by 'etags' in Makefile
/code/TAGS

# ignore uvision-generated files
code/Listings/
code/Objects/
*.uvguix.*

# ignore symlink to freertos: I'm not tracking this
# and anyway I've made it all read-only
/code/FreeRTOS-Kernel
EOF
#+end_src

We also need a FreeRTOSConfig.h.  This file is considered to be part
of the user code so I'm putting it under the =app/include=
directory. This one sets the heap size to 2kiB.  Later I'll use the
=heap_4.c= manager.  Note: this link is an essential online
[[https://www.freertos.org/a00110.html][FreeRTOSConfig.h reference]].

#+begin_src bash  :results none
cat <<EOF > kata1/code/app/include/FreeRTOSConfig.h
/*
 * FreeRTOS Kernel V10.0.1
 * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * http://www.FreeRTOS.org
 * http://aws.amazon.com/freertos
 *
 * 1 tab == 4 spaces!
 */

#ifndef FREERTOS_CONFIG_H
#define FREERTOS_CONFIG_H

/*-----------------------------------------------------------
 * Application specific definitions.
 *
 * These definitions should be adjusted for your particular hardware and
 * application requirements.
 *
 * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
 * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. 
 *
 * See http://www.freertos.org/a00110.html.
 *----------------------------------------------------------*/

#define configUSE_PREEMPTION        1
#define configUSE_IDLE_HOOK         0
#define configUSE_TICK_HOOK         0
#define configCPU_CLOCK_HZ          ( ( unsigned long ) 72000000 )  
#define configTICK_RATE_HZ          ( ( TickType_t ) 1000 )
#define configMAX_PRIORITIES        ( 5 )
#define configMINIMAL_STACK_SIZE    ( ( unsigned short ) 128 )
#define configMAX_TASK_NAME_LEN     ( 16 )
#define configUSE_TRACE_FACILITY    0
#define configUSE_16_BIT_TICKS      0
#define configIDLE_SHOULD_YIELD     1

/* memory allocation related definitions */
#define configTOTAL_HEAP_SIZE              ( ( size_t ) ( 2 * 1024 ) )
#define configSUPPORT_STATIC_ALLOCATION    0
#define configSUPPORT_DYNAMIC_ALLOCATION   1

/* Hook function related definitions */
#define configUSE_MALLOC_FAILED_HOOK 0

/* Co-routine definitions. */
#define configUSE_CO_ROUTINES       0
#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )

/* Set the following definitions to 1 to include the API function, or zero
to exclude the API function. */

/* optional functions - most linkers will remove unused fcns anyway */
#define INCLUDE_vTaskPrioritySet        1
#define INCLUDE_uxTaskPriorityGet       1
#define INCLUDE_vTaskDelete             1
#define INCLUDE_vTaskCleanUpResources   0
#define INCLUDE_vTaskSuspend            1
#define INCLUDE_vTaskDelayUntil         1
#define INCLUDE_vTaskDelay              1

/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255
(lowest) to 0 (1?) (highest). */
#define configKERNEL_INTERRUPT_PRIORITY         255
/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
#define configMAX_SYSCALL_INTERRUPT_PRIORITY    191 /* equivalent to 0xb0, or priority 11. */


/* This is the value being used as per the ST library which permits 16
priority values, 0 to 15.  This must correspond to the
configKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest
NVIC value of 255. */
#define configLIBRARY_KERNEL_INTERRUPT_PRIORITY 15

#endif /* FREERTOS_CONFIG_H */
EOF
#+end_src

At this point I should commit the current (pre-Keil) state.  If I have
not already done so.

Do this if this is the first actual commit: it adds everything.
#+begin_src bash :results none
git -C kata1 add .gitignore code
#+end_src

Then commit.  This will commit all files that have been /added/.
#+begin_src bash :results none
git -C kata1 commit --all -m "Bare f103rb proj with no Keil stuff"
#+end_src

At this point I need to create a Keil project.  Not at the top level,
but in =kata1/code=.

* Moving to the Keil environment
** 1. I'll create a project, under =code=
   - named =freertos1=
   - using the stm32f103rb
   - with packages =CMSIS CORE= and =Device Startup=

** 2. Set the debugger to stlink (default is ulink2), and do a global save.

** 3. Add
   - code/DebugConfig/
   - code/RTE/
   - code/freertos1.uvoptx
   - code/freertos1.uvprojx
** 4. Commit: "Started with Keil, set debug probe to stlink"

** 5. Now I want to add all the source files.  Surprisingly, it seems
   that you can skip adding the /include/ files to Keil.  This is
   currently absurdly awkward.

   - I will first create source groups: =main= and add all the
     application source files, under =kata1/code/app=
     - simple.cpp

   - Then create source group =freertos-gcc-arm-cm3= and add all the
     source files from freertos, under =kata1/code/FreeRTOS-Kernel=
     - =event_groups.c=
     - =list.c=
     - =queue.c=
     - =stream_buffer.c=
     - =tasks.c=
     - =timers.c=
     - (I skipped =croutine.c=)
     - =portable/GCC/ARM_CM3/port.c=
     - =portable/MemMang/heap_4.c=
   - in Keil do a *save all*
   - commit changes to .uvprojx and .uvoptx:
     - message "Add sources to groups: main and freertos-gcc-arm-cm3"

** 6. Time to compile this.  Oh I need to tell where the include files
   are, relative to the project root.
   - =./app/include=
   - =./FreeRTOS-Kernel/include=
   - =./FreeRTOS-Kernel/portable/GCC/ARM_CM3=
   This can be done globally at the top level =Target 1= which I did
   *not* bother to rename.  (This is configured under the =C/C++=)
   tab.  Use the *Include Paths* dialog.)

** 7. It's now compiling but with many warnings.  Can reduce the warnings
   by selectively disabling them.  We can disable warnings for a
   directory or a single file, or for the entire project.
   - First, for freertos, use /AC5-like/ warnings. The warnings drop
     from an insane number like 76 to 4.  *Commit*: "Use AC5-like"

     But a new error appeared:
     - undefined symbol taskCHECK_FOR_STACK_OVERFLOW

   - From the inconsistent behaviour of the Keil IDE, I suspect there
     are race conditions in various tasks accessing the .uvprojx and
     .uvoptx file.  Just conjecture.

   - I added taskCHECK_FOR_STACK_OVERFLOW to FreeRTOSConfig.h, setting
     it to 0 (which is supposed to be the default) and now it compiles
     with no errors and three warnings.  *Commit*: "Disable
     stackoverflow check"
   - The warnings still present:
     - =system_stm32f10x.c= :: -Wmissing-variable-declaration.  This
       is isolated to that file, so I can disable it just for that
       file.  *Commit*: "Disable warning: missing variable declaration"

     - =portable.h= :: -Wold-style-cast.  This file is included by almost
       everything in freertos.  So I'll disable the warning for all of
       freertos.  *Commit*: Disable warning: old-style-cast.

   - Now it builds with no warnings and no errors.
     : code=716 RO-data=252 RW-data=0 ZI-data=1752
     The problem is, it does nothing (empty main())

** 8. Last, I can replace the empty main with this content
   #+begin_example
/** A simple app, to demonstrate freertos */

/* standard includes */

/* freertos includes */
#include "FreeRTOS.h"
#include "task.h"

/* HW-specific includes (move to bsp area) */
#include "stm32f10x.h"

/**
   BLink the LED, using the lowest-level code possible
*/
#include <stdint.h>
// Where is the green LED?  connected to PB13 or PA5 with a 510 Ohm resistor
//   It looks like it's actually PA5, based on the note on p66.
//   So we need to put a High/Low on PA5 to turn LD2 On/Off.
// So we need to use GPIO port A, bit 5
// RCC block starts at 0x4002 1000
// APB2ENR is at RCC + 0x18, set bit 2
// base of GPIOA is 0x4001 0800 (is also CRL)
// want to set pin 5 of the ODR, so we need to configure pin 5
//  using CRL register
// The ODR of GPIOA is at GPIOA base address + 12 (decimal)

/*

   Full table of all possible CNF[1:0]MODE[1:0] patterns, and their
   meanings.  GPI=General Purpose Input, GPO=General Purpose Output,
   AFO=Alternate Function Output.

   |      |      |       |       | PxODR |                         |
   | CNF1 | CNF0 | MODE1 | MODE0 | bit   | Meaning                 |
   |------+------+-------+-------+-------+-------------------------|
   |    0 |    0 |     0 |     0 | x     | GPI, analog             |
   |    0 |    0 |     0 |     1 | 0/1   | GPO, push-pull, 10MHz   |
   |    0 |    0 |     1 |     0 | 0/1   | GPO, push-pull, 2MHz    |
   |    0 |    0 |     1 |     1 | 0/1   | GPO, push-pull, 50MHz   |
   |------+------+-------+-------+-------+-------------------------|
   |    0 |    1 |     0 |     0 | x     | GPI, floating (default) |
   |    0 |    1 |     0 |     1 | 0/1   | GPO, open-drain, 10MHz  |
   |    0 |    1 |     1 |     0 | 0/1   | GPO, open-drain, 2MHz   |
   |    0 |    1 |     1 |     1 | 0/1   | GPO, open-drain, 50MHz  |
   |------+------+-------+-------+-------+-------------------------|
   |    1 |    0 |     0 |     0 | 0/1   | GPI, pulldown/pullup    |
   |    1 |    0 |     0 |     1 | x     | AFO, push-pull, 10MHz   |
   |    1 |    0 |     1 |     0 | x     | AFO, push-pull, 2MHz    |
   |    1 |    0 |     1 |     1 | x     | AFO, push-pull, 50MHz   |
   |------+------+-------+-------+-------+-------------------------|
   |    1 |    1 |     0 |     0 | x     | forbidden               |
   |    1 |    1 |     0 |     1 | x     | AFO, open-drain, 10MHz  |
   |    1 |    1 |     1 |     0 | x     | AFO, open-drain, 2MHz   |
   |    1 |    1 |     1 |     1 | x     | AFO, open-drain, 50MHz  |
   |------+------+-------+-------+-------+-------------------------|

*/
int main() {
    // turn on clock for GPIOA
    *((uint32_t volatile *)0x40021018) |= 4;

    // configure PA5 to be output, push-pull, 50MHz
    *((uint32_t volatile *)(0x40010800 + 0)) = 0x44344444;

    while (1) {
        // turn on PA5 LED
        *((uint32_t volatile *)(0x40010800 + 0xc)) |=  1u<<5;
        for (int volatile counter = 0; counter < 1000000; ++counter) { }

        // turn off PA5 LED
        *((uint32_t volatile *)(0x40010800 + 0xc)) &= ~(1u<<5);
        for (int volatile counter = 0; counter < 1000000; ++counter) { }
    }
    //return 0;
}
   #+end_example

   This works, and it blinks the on-board LED of the f103rb (on PA5).
   A last commit is needed, to record this working program that
   includes freertos, but uses none of the OS features.

   *Commit*: "Replace main() with low-level blinky"
   - app/simple.cpp
   - EventRecorderStub.scvd (I suppose)

** 9. what now?
   - I started by making the body of main into a task, and calling
     =xTaskCreate= on that task, without starting the scheduler.
     This worked fine.

   - Then I invoked the scheduler, and it hung on the SVC interrupt,
     which had *not* been initialized.  Of course.  A search through
     the freertos source looking for "SVC" showed several hits, all in
     =arm_cm3/port.c=.  I ignore the "MPU" subdir.

     Line 120-122 of =port.c= look like things that need to be placed
     into the vector table.
     #+begin_example
     void xPortPendSVHandler( void ) __attribute__( ( naked ) );
     void xPortSysTickHandler( void );
     void vPortSVCHandler( void ) __attribute__( ( naked ) );
     #+end_example

** 10. Lecture#12 [2024-02-14 Wed 14:30-15:45]
    - the three function prototypes above were replaced (suggestion by
      Daniil) with the standard names used in the Keil startup code:
      #+begin_src C
      SVC_Handler     // entry 11
      PendSV_Handler  // entry 14
      SysTick_Handler // entry 15
      #+end_src

      This was done with =#define= statements in =FreeRTOSConfig.h=.
      Unfortunately I made a cut and paste error.  This mistake was
      caused by me not carefully reading what I typed, and assuming
      the order of the prototypes was in the ``natural'' order of 11,
      14, and 15.  Imagine reading this in a code review!  It would be
      spotted for sure.
      #+begin_src C
      #define xPortPendSVHandler  SVC_Handler
      #define xPortSysTickHandler PendSV_Handler
      #define vPortSVCHandler     SysTick_Handler
      #+end_src

      The correct code is below:
      #+begin_src C
      #define vPortSVCHandler     SVC_Handler
      #define xPortPendSVHandler  PendSV_Handler
      #define xPortSysTickHandler SysTick_Handler
      #+end_src

      Apparently Ashley noticed the problem, and was suggesting a way
      to fix it but I was being exceptionally dim and misunderstood.

      Anyway this bug consumed the rest of the lecture, because we got
      hardfaults, and worked on trying to reverse engineer the
      sequence of events that led to the hardfault.  I think this is
      a good strategy when you have no /a priori/ knowledge of the
      system or have exhausted all other, easier debugging strategies.
      Anyway the group came up with some good ideas.

      1. Using the map file we determined the stack and heap sizes and
         were able to rule out stack overflow and probably heap
         corruption (after doubling the heap size the problem was
         unchanged).

      2. We saw that the hardfault was a ``non-precise'' one, and
         thought about ways of making it ``precise''.  That is, by
         eliminating parallelism in the memory interfaces we would be
         able to pinpoint where the fault actually happened

      Whenever I accidentally inject a bug into a system, after I
      solve it:
      1. I always try to think deeply about the practices,
         procedures, and assumptions that led to it.  These may be
         personal or external (e.g. my employer, or my coworkers).

      2. I also try to imagine what visible manifestations I would
         /predict/ from the bug, and compare that with what I actually
         saw.

      3. And I reason about possible improvements to my process, or to
         processes outside of my control, that could have avoided
         creating the bug in the first place.  Caveat: modifying the
         processes has to be done carefully, because it can be detrimental

      Let me try to briefly go over these steps.
      1. post-mortem analysis: what went wrong?
         
         - I cut and pasted some code, instead of manually typing it.
         - I assumed the freertos code would treat the three ISRs in
           numerically increasing order, because that's what I did.
         - I was speaking to an audience, which adds a frisson of
           extra alertness, and tends to push me to /fast/ instead of
           /slow/ thinking.  This is why I didn't carefully read what
           was there.
         - I also didn't listen carefully to some suggestions

      2. Prediction
         - the PendSVC code was responding to an SVC exception (11), the
           SysTick code was responding to a PendSVC exception (14), and the
           SVC code was responding a SysTick exception (15).

         - what would one predict in this situation?  Without
           examining the freertos source, I can't really predict
           anything, but I would have expected the system to hang very
           early.  If the SVC isr was being called at 1 kHz instead of
           the SysTick isr, that might be a clue.

         - what happened?
           - the code executed correctly up until the scheduler started.
           - then it hard-faulted.

         - How could I have seen it sooner?

           - Practice: always try to get visibility into the system

           - Example: add breakpoints to the beginning of the three
             ISRs.  This would tell us which one occurred first.  And
             maybe I would notice that the executing ISR's name was
             incorrect (the code didn't match the function name)
